{"ast":null,"code":"import express from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport User from \"../models/Users.js\";\nconst router = express.Router();\n\n// User Registration\nrouter.post(\"/register\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  // Validate input\n  if (!email || !password) {\n    return res.status(400).json({\n      error: \"Email and password are required.\"\n    });\n  }\n  try {\n    // Check if user already exists\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) {\n      return res.status(409).json({\n        error: \"User already exists.\"\n      });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Save user\n    const newUser = new User({\n      email,\n      password: hashedPassword\n    });\n    await newUser.save();\n\n    // Automatically log in the user after registration\n    req.session.userId = newUser._id;\n    console.log(\"User registered:\", email);\n    res.status(201).json({\n      message: \"User registered successfully.\",\n      user: {\n        id: newUser._id,\n        email: newUser.email\n      }\n    });\n  } catch (err) {\n    console.error(\"Registration error:\", err.message);\n    res.status(500).json({\n      error: \"Server error during registration.\"\n    });\n  }\n});\n\n// User Login\nrouter.post(\"/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  // Validate input\n  if (!email || !password) {\n    return res.status(400).json({\n      error: \"Email and password are required.\"\n    });\n  }\n  try {\n    // Check if user exists\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(401).json({\n        error: \"Invalid credentials.\"\n      });\n    }\n\n    // Verify password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(401).json({\n        error: \"Invalid credentials.\"\n      });\n    }\n\n    // Create session\n    req.session.userId = user._id;\n    console.log(\"User logged in:\", email);\n    res.status(200).json({\n      message: \"Login successful.\",\n      user: {\n        id: user._id,\n        email: user.email\n      }\n    });\n  } catch (err) {\n    console.error(\"Login error:\", err.message);\n    res.status(500).json({\n      error: \"Server error during login.\"\n    });\n  }\n});\n\n// User Logout\nrouter.post(\"/logout\", (req, res) => {\n  req.session.destroy(err => {\n    if (err) {\n      console.error(\"Logout error:\", err.message);\n      return res.status(500).json({\n        error: \"Logout failed.\"\n      });\n    }\n    res.clearCookie(\"connect.sid\"); // Replace with your session cookie name\n    res.status(200).json({\n      message: \"Logged out successfully.\"\n    });\n  });\n});\n\n// Check Authentication Status\nrouter.get(\"/check-auth\", (req, res) => {\n  // Verify session status\n  if (req.session && req.session.userId) {\n    return res.status(200).json({\n      isAuthenticated: true\n    });\n  }\n  res.status(200).json({\n    isAuthenticated: false\n  });\n});\nexport default router;","map":{"version":3,"names":["express","bcrypt","User","router","Router","post","req","res","email","password","body","status","json","error","existingUser","findOne","hashedPassword","hash","newUser","save","session","userId","_id","console","log","message","user","id","err","isMatch","compare","destroy","clearCookie","get","isAuthenticated"],"sources":["C:/Users/anish/Documents/programming/studhelp2.0/src/components/Login/Login.tsx"],"sourcesContent":["import express from \"express\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport User from \"../models/Users.js\";\r\n\r\nconst router = express.Router();\r\n\r\n// User Registration\r\nrouter.post(\"/register\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  // Validate input\r\n  if (!email || !password) {\r\n    return res.status(400).json({ error: \"Email and password are required.\" });\r\n  }\r\n\r\n  try {\r\n    // Check if user already exists\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(409).json({ error: \"User already exists.\" });\r\n    }\r\n\r\n    // Hash password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Save user\r\n    const newUser = new User({ email, password: hashedPassword });\r\n    await newUser.save();\r\n\r\n    // Automatically log in the user after registration\r\n    req.session.userId = newUser._id;\r\n\r\n    console.log(\"User registered:\", email);\r\n    res.status(201).json({\r\n      message: \"User registered successfully.\",\r\n      user: { id: newUser._id, email: newUser.email },\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Registration error:\", err.message);\r\n    res.status(500).json({ error: \"Server error during registration.\" });\r\n  }\r\n});\r\n\r\n// User Login\r\nrouter.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  // Validate input\r\n  if (!email || !password) {\r\n    return res.status(400).json({ error: \"Email and password are required.\" });\r\n  }\r\n\r\n  try {\r\n    // Check if user exists\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(401).json({ error: \"Invalid credentials.\" });\r\n    }\r\n\r\n    // Verify password\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(401).json({ error: \"Invalid credentials.\" });\r\n    }\r\n\r\n    // Create session\r\n    req.session.userId = user._id;\r\n\r\n    console.log(\"User logged in:\", email);\r\n    res.status(200).json({\r\n      message: \"Login successful.\",\r\n      user: { id: user._id, email: user.email },\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Login error:\", err.message);\r\n    res.status(500).json({ error: \"Server error during login.\" });\r\n  }\r\n});\r\n\r\n// User Logout\r\nrouter.post(\"/logout\", (req, res) => {\r\n  req.session.destroy((err) => {\r\n    if (err) {\r\n      console.error(\"Logout error:\", err.message);\r\n      return res.status(500).json({ error: \"Logout failed.\" });\r\n    }\r\n\r\n    res.clearCookie(\"connect.sid\"); // Replace with your session cookie name\r\n    res.status(200).json({ message: \"Logged out successfully.\" });\r\n  });\r\n});\r\n\r\n// Check Authentication Status\r\nrouter.get(\"/check-auth\", (req, res) => {\r\n  // Verify session status\r\n  if (req.session && req.session.userId) {\r\n    return res.status(200).json({ isAuthenticated: true });\r\n  }\r\n  res.status(200).json({ isAuthenticated: false });\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}