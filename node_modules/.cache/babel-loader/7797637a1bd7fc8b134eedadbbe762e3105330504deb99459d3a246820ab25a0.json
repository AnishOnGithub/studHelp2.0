{"ast":null,"code":"import express from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport User from \"../models/Users.js\";\nconst router = express.Router();\n\n// Utility function to generate JWT\nconst generateToken = userId => {\n  return jwt.sign({\n    userId\n  }, process.env.JWT_SECRET, {\n    expiresIn: \"7d\" // Token expires in 7 days\n  });\n};\n\n// Register User\nrouter.post(\"/register\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  if (!email || !password) {\n    return res.status(400).json({\n      error: \"Email and password are required.\"\n    });\n  }\n  try {\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) {\n      return res.status(409).json({\n        error: \"User already exists.\"\n      });\n    }\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new User({\n      email,\n      password: hashedPassword\n    });\n    await newUser.save();\n    const token = generateToken(newUser._id);\n    res.status(201).json({\n      message: \"User registered successfully.\",\n      token\n    });\n  } catch (error) {\n    console.error(\"Registration error:\", error.message);\n    res.status(500).json({\n      error: \"Error registering user.\"\n    });\n  }\n});\n\n// Login User\nrouter.post(\"/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  if (!email || !password) {\n    return res.status(400).json({\n      error: \"Email and password are required.\"\n    });\n  }\n  try {\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(401).json({\n        error: \"Invalid credentials.\"\n      });\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(401).json({\n        error: \"Invalid credentials.\"\n      });\n    }\n    const token = generateToken(user._id);\n    res.status(200).json({\n      message: \"Login successful.\",\n      token\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error.message);\n    res.status(500).json({\n      error: \"Error logging in.\"\n    });\n  }\n});\n\n// Check Authentication\nrouter.post(\"/check-auth\", async (req, res) => {\n  var _req$headers$authoriz;\n  const token = (_req$headers$authoriz = req.headers.authorization) === null || _req$headers$authoriz === void 0 ? void 0 : _req$headers$authoriz.split(\" \")[1];\n  if (!token) {\n    return res.status(401).json({\n      isAuthenticated: false\n    });\n  }\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    const user = await User.findById(decoded.userId);\n    if (!user) {\n      return res.status(404).json({\n        isAuthenticated: false\n      });\n    }\n    res.status(200).json({\n      isAuthenticated: true,\n      email: user.email // Include user's email in the response\n    });\n  } catch (error) {\n    console.error(\"Authentication check error:\", error.message);\n    res.status(401).json({\n      isAuthenticated: false\n    });\n  }\n});\n\n// Logout (Optional for client-side token clearing)\nrouter.post(\"/logout\", (req, res) => {\n  res.status(200).json({\n    message: \"Logged out successfully.\"\n  });\n});\nexport default router;","map":{"version":3,"names":["express","bcrypt","jwt","User","router","Router","generateToken","userId","sign","process","env","JWT_SECRET","expiresIn","post","req","res","email","password","body","status","json","error","existingUser","findOne","hashedPassword","hash","newUser","save","token","_id","message","console","user","isMatch","compare","_req$headers$authoriz","headers","authorization","split","isAuthenticated","decoded","verify","findById"],"sources":["C:/Users/anish/Documents/programming/studhelp2.0/src/App.tsx"],"sourcesContent":["import express from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport User from \"../models/Users.js\";\n\nconst router = express.Router();\n\n// Utility function to generate JWT\nconst generateToken = (userId) => {\n  return jwt.sign({ userId }, process.env.JWT_SECRET, {\n    expiresIn: \"7d\", // Token expires in 7 days\n  });\n};\n\n// Register User\nrouter.post(\"/register\", async (req, res) => {\n  const { email, password } = req.body;\n\n  if (!email || !password) {\n    return res.status(400).json({ error: \"Email and password are required.\" });\n  }\n\n  try {\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.status(409).json({ error: \"User already exists.\" });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new User({ email, password: hashedPassword });\n    await newUser.save();\n\n    const token = generateToken(newUser._id);\n\n    res.status(201).json({ message: \"User registered successfully.\", token });\n  } catch (error) {\n    console.error(\"Registration error:\", error.message);\n    res.status(500).json({ error: \"Error registering user.\" });\n  }\n});\n\n// Login User\nrouter.post(\"/login\", async (req, res) => {\n  const { email, password } = req.body;\n\n  if (!email || !password) {\n    return res.status(400).json({ error: \"Email and password are required.\" });\n  }\n\n  try {\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid credentials.\" });\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(401).json({ error: \"Invalid credentials.\" });\n    }\n\n    const token = generateToken(user._id);\n\n    res.status(200).json({ message: \"Login successful.\", token });\n  } catch (error) {\n    console.error(\"Login error:\", error.message);\n    res.status(500).json({ error: \"Error logging in.\" });\n  }\n});\n\n// Check Authentication\nrouter.post(\"/check-auth\", async (req, res) => {\n  const token = req.headers.authorization?.split(\" \")[1];\n\n  if (!token) {\n    return res.status(401).json({ isAuthenticated: false });\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n    const user = await User.findById(decoded.userId);\n    if (!user) {\n      return res.status(404).json({ isAuthenticated: false });\n    }\n\n    res.status(200).json({\n      isAuthenticated: true,\n      email: user.email, // Include user's email in the response\n    });\n  } catch (error) {\n    console.error(\"Authentication check error:\", error.message);\n    res.status(401).json({ isAuthenticated: false });\n  }\n});\n\n// Logout (Optional for client-side token clearing)\nrouter.post(\"/logout\", (req, res) => {\n  res.status(200).json({ message: \"Logged out successfully.\" });\n});\n\nexport default router;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}